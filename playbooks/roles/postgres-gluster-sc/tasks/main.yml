---
- name: retrieve gluster-pod IPs
  command: >
    kubectl get pods
    --namespace=storage-heketi
    -o jsonpath='{.items[?(@.spec.containers[*].name=="glusterfs")].status.podIP}'
  register: get_ips

- name: set fact enpoint_list
  set_fact:
    enpoint_list: "[\"{{get_ips.stdout | replace(' ','\",\"')}}\"]"

- name: retrieve heketi endpoint
  command: >
    kubectl get endpoints
    --namespace=storage-heketi
    -o jsonpath='{.items[?(@.metadata.name=="heketi")].subsets[*].addresses[*].ip}:{.items[?(@.metadata.name=="heketi")].subsets[*].ports[*].port}'
  register: get_heketi_endpoint

- name: set fact get_heketi_endpoint
  set_fact:
    heketi_endpoint: "{{ get_heketi_endpoint.stdout }}"

- name: set fact glusternode_count
  set_fact:
    glusterpod_count: "{{ (enpoint_list | length) | int }}"

# volumtype (replication factor): <VolumeDurability>:number eg. none:1, replicate:2, replicate:3 , disperse:???
# in jinja2 - means remove any whitespace before this bracket
- name: set fact volumetype
  set_fact:
    volumetype: "{% if (glusterpod_count | int) == 1 %}none:1
                 {%- elif (glusterpod_count | int) == 2 %}replicate:2
                 {%- else %}replicate:3{% endif %}"
  when: volumetype is undefined

- name: render storage-class-pg-optimized
  template:
    src: storage-class-pg-optimized.yml
    dest: "~/.kubernetes-yaml/heketi/storage-class-pg-optimized.yml"

- name: create storage-class-pg-optimized
  command: >
    kubectl apply -f
    $HOME/.kubernetes-yaml/heketi/storage-class-pg-optimized.yml
